plugins {
    id 'com.android.application'
    id 'kotlin-android'

    // needed for Dependency Injection
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'

    // Needed to ensure type-safety in the navigation
    id 'androidx.navigation.safeargs.kotlin'
    id 'maven-publish'
}

android {
    compileSdk 31

    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }


    defaultConfig {
        applicationId 'com.example.zlatko.beaches'
        minSdk 28
        targetSdk 31
        versionCode new Date().format('yyMMddHH') as Integer
        versionName getVersionName()

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        manifestPlaceholders = [google_map_key: System.getenv('GOOGLE_MAPS_KEY')]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.1.0-beta04'
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "brandenburg-bathing-areas_${getVersionName()}.apk"
        }
    }

}



dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'

    // for Maps
    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    implementation 'com.google.maps.android:android-maps-utils:2.0.3'



    // for dependency injection
    def hiltVersion = '2.38.1'
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0-rc01"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"


    // for talking to the brandenburg backend
    def retrofitVersion = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-simplexml:$retrofitVersion"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'

    // for async work with coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'

    // for MVVM
    def lifecycleVersion = '2.4.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"

    // for DAO
    def roomVersion = "2.4.0"
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation("androidx.room:room-ktx:$roomVersion")
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    // for working with images
    implementation 'io.coil-kt:coil-compose:1.4.0'

    // for navigation
    def navigationVersion = '2.3.5'
    implementation "androidx.navigation:navigation-compose:2.4.0-rc01"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"



    // for compose
    def compose_version = '1.0.5'
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"


    // tests
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

// Allow references to generated code (needed for Dependency Injection)
kapt {
    correctErrorTypes true
}


def getVersionName() {
    System.getenv('VERSION') ?: gitBranch()
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}